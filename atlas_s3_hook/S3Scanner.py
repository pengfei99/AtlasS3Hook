#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

from atlas_client.client import Atlas
from atlas_s3_hook.S3Hook import S3Hook
from atlas_s3_hook.S3MetadataClient import S3MetadataClient
from atlas_s3_hook.S3PathClass import S3PathClass
import logging


class S3Scanner:
    def __init__(self, s3_client: S3MetadataClient, atlas_client: Atlas, owner="unknown") -> None:
        self.s3_client = s3_client
        self.fs = s3_client.get_fs()
        self.default_owner = owner
        self.s3_atlas_hook = S3Hook(s3_client, atlas_client)

    def scan_path(self, path: str, description: str = "generated by s3 atlas hook") -> None:
        sub_path_list = []
        # create the meta data for current path
        path_class = self.s3_client.get_class_from_path(path)
        if path_class == S3PathClass.BUCKET:
            self.add_bucket(path, description)
            sub_path_list.extend(self.fs.ls(path))
        elif path_class == S3PathClass.DIR:
            self.add_dir(path, description)
            sub_path_list.extend(self.fs.ls(path))
        elif path_class == S3PathClass.OBJECT:
            # avoid loading .keep file
            if path.split("/")[-1] == ".keep":
                pass
            else:
                self.add_object(path, description)
        else:
            raise ValueError
        if sub_path_list:
            for sub_path in sub_path_list:
                self.scan_path(sub_path, description)

    def add_bucket(self, bucket_name: str, description: str) -> None:
        bucket_meta = self.s3_client.get_path_meta_data(bucket_name)
        print(bucket_meta)
        self.s3_atlas_hook.create_atlas_bucket(bucket_meta, description)

    def add_dir(self, dir_name: str, description: str) -> None:
        dir_meta = self.s3_client.get_path_meta_data(dir_name)
        print(dir_meta)
        self.s3_atlas_hook.create_atlas_ps_dir(dir_meta, description)

    def add_object(self, obj_name: str, description: str) -> None:
        obj_meta = self.s3_client.get_path_meta_data(obj_name)
        print(obj_meta)
        self.s3_atlas_hook.create_atlas_object(obj_meta, self.default_owner, description)
